# GameInterfaceTick()

# TODO:
# when to call Entity::onCollide() / Entity::offCollide() ?
# receive and send
# GameInterface::tickPhysics(): variable c muss deleted werden

static float GameInterface::MAX_TIME = 1;

void GameInterface::tick()
{
	tickEntities();
	tickPhysics();
	render();
}

void GameInterface::tickEntities()
{
	for dynamic-entity: tick();
}

void GameInterface::tickPhysics()
{
	float timeLeft = MAX_TIME;
	std::vector<ExpectedCollision*> collisions; // Es gäbe auch die Möglichkeit diesen vector global zu machen & länger als nur MAX_TIME vorauszuberechnen
	addAllCollisions(&collisions); // Errechnet alle Collisions, die in diesem Frame passieren würden, wenn sich die zugehörigen Entities mit konstanter Geschwindigkeit bewegen würden
	while (collisions.size() > 0)
	{
		ExpectedCollision* c = getFirstCollision(collisions); // Returnt die Collision mit kleinstem getTime(). Also die Collision, die als nächstes ausgeführt werden muss.
		moveAllEntities(c->getTime());	// bewegt alle Entities bis zu der Situation, in der die nächste "globale" Collision passiert
						// remember rotation is updated too
		timeLeft -= c->getTime();

		// Reaktion auf die Collision
		CollisionHandler::handleCollision(c);

		// Falls eine der Entities beschleunigt/umpositioniert wurden, werden die Collisions der Entity neu berechnet
		for entity in dynamic-entity:
		{
			if entity->hasChanged()
			{
				updateCollisionsFrom(entity, &collisions, timeLeft);
			}
		}
	}
	moveAllEntities(timeLeft);

	for entity in dynamic-entity:
	{
		if !entity->isFloating()
		{
			entity->applyGravity();
		}
	}
}

// collision-list working

void GameInterface::addAllCollisions(std::vector<ExpectedCollision*>* collisions)
{
	for entity as non-tile-entity: addCollisionsFrom(entity, collisions, MAX_TIME);
}

void GameInterface::updateCollisionsFrom(Entity* e, std::vector<ExpectedCollision*>* collisions, float timeLeft)
{
	for col in *collisions:
		if e in col->getEntities()
			remove col from collisions
	addCollisionsFrom(e, collisions, timeLeft);
}

void GameInterface::addCollisionsFrom(Entity* e, std::vector<ExpectedCollision*>* collisions, float timeLeft)
{
	for entity in entities
	{
		if (e != entity && e->getCollisionPriority(entity) + entity->getCollisionPriority(e) >= 0 && collision doesnt exist)
		{
			ExpectedCollision *c = CollisionDetector::expectCollisionBetween(entity, e, timeLeft);
			if (c != NULL)
			{
				collisions->push_back(c);
			}
		}
	}
}

// findCollision

ExpectedCollision* CollisionDetector::expectCollisionBetween(Entity*, Entity*, float timeLeft)
{
	// Ansätze für diese Funktion finden sich in collisionDetection/
}

// handleCollision

void CollisionHandler::handleCollision(ExpectedCollision* c)
{
	// TODO

	/* Grober Plan:
		sponginess := max(sponginess1, sponginess2)
		v1 := (m1*v1 + m2*v2)/(m1 + m2)*(1 + sponginess) // Funktioniert für sticky-collision
		v2 := (m1*v1 + m2*v2)/(m1 + m2)*(1 - sponginess)

		CollisionHandlingTypes:
		- solid { float sponginess; }
		- permeable
		- sticky

		- bool Entity::isStatic()
		- CollisionHandlingType* Entity::collisionHandlingType;
		- GameVector Entity::push(GameVector speed, GameVector point, float/int mass)
			Falls zwei solid-Objekte sich berühren, ruft entity1 folgendes auf: otherEntity->push(this->speed, collisionPoint, this->mass)
			die push()-Funktion wird rekursiv ausgeführt
			die push()-Funktion returnt die Geschwindigkeit die das aufrufende Objekt nach der Kollision bekommt

			Beispiel:

				  | // arrow A
				  V
				[""] // Kiste B
				["""""] // static-tile C

				A fällt von oben in B
				A führt deshalb
					B->push(this->speed, collisionPoint, this->mass) aus.
				B::push(speed, collisionPoint, mass) leitet push weiter, führt also
					C->push(speed + this->speed, collisionPointToC, mass + this->mass) aus.
				C::push(speed, collisionPoint, mass)
					returnt GameVector(0,0), da es ein static-tile ist
				B::push gibt GameVector(0,0) zurück.
				deshalb: B->speed = GameVector(0,0)
				A::push gibt GameVector(0,0) zurück.
				deshalb: A->speed = GameVector(0,0)
	*/
}
