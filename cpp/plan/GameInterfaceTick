# GameInterfaceTick()

# TODO:
# what about gravity?

void GameInterface::tick()
{
	// TODO receive() & send()
	tickEntities();
	tickPhysics();
	render();
}

void GameInterface::tickEntities()
{
	for dynamic-entity: tick();
}

void GameInterface::tickPhysics()
{
	float t = 0;
	std::vector<Collision*> collisions;
	addAllCollisions(&collisions); // Errechnet alle Collisions, die in diesem Frame passieren würden, wenn sich die zugehörigen Entities mit konstanter Geschwindigkeit bewegen würden
	while (collisions.size() > 0)
	{
		Collision* c = getTinyT(collisions); // Returnt die Collision mit kleinstem t. Also die Collision, die als nächstes ausgeführt werden muss.
		moveAllEntities(c->getTime() - t); // bewegt alle Entities bis zu der Situation, in der die nächste "globale" Collision passiert
						   // TODO remember rotation is updated too
		t = c->getTime();

		// Reaktion auf die Collision
		// Falls eine der Entities beschleunigt wurde, werden die Collisions der Entity neu berechnet (Die alten werden gelöscht)(auch beide Entities können betroffen sein)
		// Die Collision, auf die gerade reagiert wurde, wird auf alle Fälle gelöscht, auch wenn keine der beiden Entities 
		applyCollision(c, collisions, t); 
	}
	moveAllEntities(MAX_T-t);
}

void GameInterface::addAllCollisions(std::vector<Collision*>* collisions)
{
	for entity as non-tile-entity: addCollisionFrom(entity, collisions, MAX_T);
}

void GameInterface::addCollisionFrom(Entity* e, std::vector<Collision*>* collisions, float t)
{
	for entity in entities
	{
		if (e != entity && e->getCollisionPriority(entity) + entity->getCollisionPriority(e) >= 0 && collision doesnt exist)
		{
			Collision *c = CollisionDetector::getCollisionWithT(entity, e, t);
			if (c != NULL)
			{
				collisions->push_back(c);
			}
		}	
	}
}

Collision* CollisionDetector::getCollisionWithT(Entity* e1, Entity* e2, float t)
{
	// Ansätze für diese Funktion finden sich in collisionDetection/
}

void GameInterface::applyCollision(Collision* c, std::vector<Collision*>* collisions, float t)
{
	// Collision wird aus Liste entfernt
	EntferneDieCollisionAusListe(c, collisions);
	// Beide Entities reagieren auf die Collision
	for e in c->getEntities()
	{
		// Collisions neu berechnen, wenn eine der Entities beschleunigt wurde
		if (e.applyCollision(c))
		{
			LöscheAlleCollisionsMit(e);
			addCollisionFrom(e, collisions, t);
		}
	}
	delete c;
}

Collision* CollisionDetector::getCollisionWithT(Entity*, Entity*, float t)
{
	Collision* c = // get collision anyhow
	// REMEMBER c->time should be relative to t = 0
	// ==> c->setTime(c->getTime() + t);
	return c;
}

void Entity::applyCollision(Collision* c)
{
	// TODO

	/* Grober Plan:
		sponginess := max(sponginess1, sponginess2)
		v1 := (m1*v1 + m2*v2)/(m1 + m2)*(1 + sponginess) // Funktioniert für sticky-collision
		v2 := (m1*v1 + m2*v2)/(m1 + m2)*(1 - sponginess)

		CollisionHandlingTypes:
		- solid { float sponginess; }
		- permeable

		- bool Entity::isStatic()
		- CollisionHandlingType* Entity::collisionHandlingType;
		- GameVector Entity::push(GameVector speed, GameVector point, float/int mass)
			Falls zwei solid-Objekte sich berühren, ruft entity1 folgendes auf: otherEntity->push(this->speed, collisionPoint, this->mass)
			die push()-Funktion wird rekursiv ausgeführt
			die push()-Funktion returnt die Geschwindigkeit die das aufrufende Objekt nach der Kollision bekommt

			Beispiel:

				  | // arrow A
				  V
				[""] // Kiste B
				["""""] // static-tile C

				A fällt von oben in B
				A führt deshalb
					B->push(this->speed, collisionPoint, this->mass) aus.
				B::push(speed, collisionPoint, mass) leitet push weiter, führt also
					C->push(speed + this->speed, collisionPointToC, mass + this->mass) aus.
				C::push(speed, collisionPoint, mass)
					returnt GameVector(0,0), da es ein static-tile ist
				B::push gibt GameVector(0,0) zurück.
				deshalb: B->speed = GameVector(0,0)
				A::push gibt GameVector(0,0) zurück.
				deshalb: A->speed = GameVector(0,0)
	*/
}
