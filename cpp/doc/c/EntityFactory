# c/EntityFactory

ApproxDuration: ""
DependsOn: "c/EntityPart"

# Description
Entity {
	private:
		Entity(<X>Part*, <Y>Part*, ...) {...}
	friend class EntityFactory;
}

class EntityFactory {
	private:
		EntityFactory() = default; // should never be called
		static <X>Part default<X>Part;
		static <Y>Part default<Y>Part;
	protected:
		static Entity* createEntity(<X>Part* x, <Y>Part* y, ...) { return new Entity(x, y, ...); }
		static <X>Part* getDefault<X>Part() { return &default<X>Part; }
		static <Y>Part* getDefault<Y>Part() { return &default<Y>Part; }
		// ...
}

class NormalTileFactory : EntityFactory {
	public:
		static Entity* create(args...) {
			// create parts
			<X>Part* x = new <Sub><X>Part(...); // custom create
			<Y>Part* y = getDefault<Y>Part();	// default create

			// create Entity
			return createEntity(x, y, ...);
		}
}

# Rating - Prediction
# Rating - Review
