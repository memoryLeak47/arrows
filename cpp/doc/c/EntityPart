# c/EntityPart

ApproxDuration: ""
DependsOn: "c/Entity"
Sub.CreateEntity: "c/EntityFactory"

# Description
The properties of the Entity class are too complex to display by inheritance.
Therefore the Entity is split into "parts".
Every part specifies behaviour.

class <X>Part {
	public:
		virtual float foo(Entity*) = 0;
}

class <Y>Part {
	public:
		virtual void baz(Entity*) = 0;
		virtual void bar(Entity*, int i) = 0;
}

// in Entity.hpp
class <X>Part;
class <Y>Part;

Entity {
	private:
		<X>Part *x;
		<Y>Part *y;
	public:
		float foo() { return x->foo(this); }
		void baz() { return y->baz(this); }
		void bar(int i) { y->bar(this, i); }
}

.CreateEntity:
	Defines how a new Entity is built.
	Should only create valid state Entities (EntityParts != nullptr).

# Rating - Prediction
# Rating - Review
